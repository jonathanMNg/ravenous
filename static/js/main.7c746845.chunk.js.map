{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","App.js","serviceWorker.js","index.js"],"names":["Business","react_default","a","createElement","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","components_Business_Business","id","sortByOptions","Best Match","Highest Rated","Most Reviewed","SearchBar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","term","location","sortBy","handleTermChange","bind","assertThisInitialized","handleLocationChange","handleSearch","sortByOption","_this2","keys","sortByOptionValue","onClick","handleSortByChange","getSortByClass","setState","e","target","value","searchYelp","preventDefault","renderSortByOptions","onChange","placeholder","href","Yelp","something","search","console","log","concat","fetch","headers","Authorization","then","response","clone","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","message","App","components_SearchBar_SearchBar","components_BusinessList_BusinessList","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7c746845.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component {\n  render() {\n    return (\n        <div className=\"Business\">\n          <div className=\"image-container\">\n            <img src={this.props.business.imageSrc} alt=''/>\n          </div>\n          <h2>{this.props.business.name}</h2>\n          <div className=\"Business-information\">\n            <div className=\"Business-address\">\n              <p>{this.props.business.address}</p>\n              <p>{this.props.business.city}</p>\n              <p>{this.props.business.state} {this.props.business.zipCode}</p>\n            </div>\n            <div className=\"Business-reviews\">\n              <h3>{this.props.business.category}</h3>\n              <h3 className=\"rating\">{this.props.business.rating}</h3>\n              <p>{this.props.business.reviewCount}</p>\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\nexport default Business;","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component {\n  render() {\n    return (\n        <div className=\"BusinessList\">\n          {this.props.businesses.map( (business, key) => {\n            return <Business key={business.id} business={business}/>\n          })}\n        </div>\n    );\n  }\n}\n\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\nconst sortByOptions = {\n  'Best Match' : 'best_match',\n  'Highest Rated': 'rating',\n  'Most Reviewed': 'review_count'\n};\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: 'Pho One',\n      location: 'Honolulu, Hawaii',\n      sortBy: 'best_match'\n    };\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n\n  }\n\n  getSortByClass(sortByOption) {\n    return sortByOption === this.state.sortBy ? 'active' : '';\n  }\n  renderSortByOptions() {\n    return Object.keys(sortByOptions).map( sortByOption => {\n      let sortByOptionValue = sortByOptions[sortByOption];\n      return (\n          <li\n            onClick={this.handleSortByChange.bind(this, sortByOptionValue)}\n            className={this.getSortByClass(sortByOptionValue)}\n            key={sortByOption}>\n            {sortByOption}\n          </li>);\n    });\n  }\n  handleSortByChange(sortByOption) {\n    this.setState({ sortBy: sortByOption});\n  }\n  handleTermChange(e) {\n    this.setState({\n      term: e.target.value\n    });\n  }\n  handleLocationChange(e) {\n    this.setState({\n      location: e.target.value\n    });\n  }\n  handleSearch(e) {\n   this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n   e.preventDefault();\n  }\n  render() {\n    return (\n        <div className=\"SearchBar\">\n          <div className=\"SearchBar-sort-options\">\n            <ul>\n              {this.renderSortByOptions()}\n            </ul>\n          </div>\n          <div className=\"SearchBar-fields\">\n            <input onChange={this.handleTermChange} placeholder=\"Search Businesses\"/>\n            <input onChange={this.handleLocationChange} placeholder=\"Where?\"/>\n          </div>\n          <div className=\"SearchBar-submit\">\n            <a href=\"#\" onClick={this.handleSearch}>Let's Go</a>\n          </div>\n        </div>\n    );\n  }\n\n}\nexport default SearchBar;","\nconst apiKey = 'FYj6gnxsGrv5cs0F-IsU_gE1x_aROAu91t-j5tCn8bgju6Spg1OqaLdhWa2jBtbr0kKdfbV-9TbQaKH4OyVGXShyquda9zdQoY3X-qxgw4vDrC0fa2nwTZea59cSXHYx';\n\nconst Yelp = {\n  something() {\n\n  },\n  search(term, location, sortBy) {\n    console.log(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`);\n    return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\n      headers: {\n        Authorization: `Bearer ${apiKey}`\n      }\n    })\n        .then( response => {\n          const responseCopy = response.clone();\n          return responseCopy.json();\n        }).then( jsonResponse => {\n          if(jsonResponse.businesses) {\n            return jsonResponse.businesses.map( business => {\n              return {\n                id: business.id,\n                imageSrc: business.image_url,\n                name: business.name,\n                address: business.location.address1,\n                city: business.location.city,\n                state: business.location.state,\n                zipCode: business.location.zip_code,\n                category: business.categories.title,\n                rating: business.rating,\n                reviewCount: business.review_count\n\n              }\n            });\n          }\n          else {\n            return {message: \"Error, no results are found\"};\n          }\n        });\n  }\n}\n\nexport default Yelp;","import React, { Component } from 'react';\nimport BusinessList from './components/BusinessList/BusinessList';\nimport SearchBar from './components/SearchBar/SearchBar';\nimport Yelp from './util/Yelp';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: []\n    };\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n  searchYelp(term, location, sortBy) {\n     Yelp.search(term, location, sortBy).then( businesses => {\n\n       console.log(businesses);\n       this.setState({\n         businesses: businesses\n       })\n     });\n  }\n  render() {\n    return (\n        <div className=\"App\">\n          <h1>ravenous</h1>\n          <SearchBar searchYelp={this.searchYelp}/>\n          <BusinessList businesses={this.state.businesses}/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}